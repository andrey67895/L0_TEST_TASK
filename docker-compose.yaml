version: '3.8'

services:
  app-consumer:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - L0_DB_HOST=postgres
      - L0_KAFKA_BROKERS=kafka:9092
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - api_l0_task_test_network

  app-producer:
    build:
      context: .
      dockerfile: DockerfileProducer
    environment:
      - L0_KAFKA_BROKERS=kafka:9092
    depends_on:
      app-consumer:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - api_l0_task_test_network

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
#    ports:
#      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - api_l0_task_test_network

  kafka:
    image: bitnami/kafka:4.0
    container_name: kafka
#    ports:
#      - "9092:9092"
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - api_l0_task_test_network


volumes:
  postgres_data:
  kafka_data:

networks:
  api_l0_task_test_network:
    driver: bridge