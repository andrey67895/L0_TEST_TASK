// Package core_client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package core_client

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Delivery defines model for Delivery.
type Delivery struct {
	Address string `json:"address"`
	City    string `json:"city"`
	Email   string `json:"email"`
	Name    string `json:"name"`
	Phone   string `json:"phone"`
	Region  string `json:"region"`
	Zip     string `json:"zip"`
}

// Item defines model for Item.
type Item struct {
	Brand       *string `json:"brand,omitempty"`
	ChrtId      int     `json:"chrt_id"`
	Name        string  `json:"name"`
	NmId        *int    `json:"nm_id,omitempty"`
	Price       int     `json:"price"`
	Rid         string  `json:"rid"`
	Sale        *int    `json:"sale,omitempty"`
	Size        *string `json:"size,omitempty"`
	Status      *int    `json:"status,omitempty"`
	TotalPrice  *int    `json:"total_price,omitempty"`
	TrackNumber string  `json:"track_number"`
}

// Order defines model for Order.
type Order struct {
	CustomerId        *string    `json:"customer_id,omitempty"`
	DateCreated       *time.Time `json:"date_created,omitempty"`
	Delivery          Delivery   `json:"delivery"`
	DeliveryService   *string    `json:"delivery_service,omitempty"`
	Entry             string     `json:"entry"`
	InternalSignature *string    `json:"internal_signature,omitempty"`
	Items             []Item     `json:"items"`
	Locale            *string    `json:"locale,omitempty"`
	OofShard          *string    `json:"oof_shard,omitempty"`
	OrderUid          string     `json:"order_uid"`
	Payment           Payment    `json:"payment"`
	Shardkey          *string    `json:"shardkey,omitempty"`
	SmId              *int       `json:"sm_id,omitempty"`
	TrackNumber       string     `json:"track_number"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount       int     `json:"amount"`
	Bank         *string `json:"bank,omitempty"`
	Currency     string  `json:"currency"`
	CustomFee    *int    `json:"custom_fee,omitempty"`
	DeliveryCost *int    `json:"delivery_cost,omitempty"`
	GoodsTotal   *int    `json:"goods_total,omitempty"`
	PaymentDt    *int    `json:"payment_dt,omitempty"`
	Provider     string  `json:"provider"`
	RequestId    *string `json:"request_id,omitempty"`
	Transaction  string  `json:"transaction"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiMainIndexHtml request
	GetApiMainIndexHtml(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiV1GetOrderByOrderUid request
	ApiV1GetOrderByOrderUid(ctx context.Context, orderUid string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiMainIndexHtml(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMainIndexHtmlRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiV1GetOrderByOrderUid(ctx context.Context, orderUid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiV1GetOrderByOrderUidRequest(c.Server, orderUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiMainIndexHtmlRequest generates requests for GetApiMainIndexHtml
func NewGetApiMainIndexHtmlRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiV1GetOrderByOrderUidRequest generates requests for ApiV1GetOrderByOrderUid
func NewApiV1GetOrderByOrderUidRequest(server string, orderUid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "order_uid", runtime.ParamLocationPath, orderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/order/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiMainIndexHtmlWithResponse request
	GetApiMainIndexHtmlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMainIndexHtmlResponse, error)

	// ApiV1GetOrderByOrderUidWithResponse request
	ApiV1GetOrderByOrderUidWithResponse(ctx context.Context, orderUid string, reqEditors ...RequestEditorFn) (*ApiV1GetOrderByOrderUidResponse, error)
}

type GetApiMainIndexHtmlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiMainIndexHtmlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMainIndexHtmlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiV1GetOrderByOrderUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
}

// Status returns HTTPResponse.Status
func (r ApiV1GetOrderByOrderUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiV1GetOrderByOrderUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiMainIndexHtmlWithResponse request returning *GetApiMainIndexHtmlResponse
func (c *ClientWithResponses) GetApiMainIndexHtmlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMainIndexHtmlResponse, error) {
	rsp, err := c.GetApiMainIndexHtml(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMainIndexHtmlResponse(rsp)
}

// ApiV1GetOrderByOrderUidWithResponse request returning *ApiV1GetOrderByOrderUidResponse
func (c *ClientWithResponses) ApiV1GetOrderByOrderUidWithResponse(ctx context.Context, orderUid string, reqEditors ...RequestEditorFn) (*ApiV1GetOrderByOrderUidResponse, error) {
	rsp, err := c.ApiV1GetOrderByOrderUid(ctx, orderUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiV1GetOrderByOrderUidResponse(rsp)
}

// ParseGetApiMainIndexHtmlResponse parses an HTTP response from a GetApiMainIndexHtmlWithResponse call
func ParseGetApiMainIndexHtmlResponse(rsp *http.Response) (*GetApiMainIndexHtmlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMainIndexHtmlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiV1GetOrderByOrderUidResponse parses an HTTP response from a ApiV1GetOrderByOrderUidWithResponse call
func ParseApiV1GetOrderByOrderUidResponse(rsp *http.Response) (*ApiV1GetOrderByOrderUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiV1GetOrderByOrderUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
